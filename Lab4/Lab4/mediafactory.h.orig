#ifndef MEDIAFACTORY_H
#define MEDIAFACTORY_H
#include "factory.h"
#include "media.h"
<<<<<<< HEAD
#include <iostream>
#include <fstream>
#include <typeinfo>
class MediaFactory :
	public Factory
{

public:
	MediaFactory();
	~MediaFactory();
	Media *createMedia(string,ifstream&);	//parses input to create movies
	Media *createMedia(const Movie& m);		//used in place of a copy constructor for Media
=======
#include <string>

class MediaFactory : public Factory {
public:
	MediaFactory(void);
	~MediaFactory(void);
    Media* createMedia(String);
>>>>>>> a925336a4d241d7eb74836a3e8f13ecc7ae8e618
};
/*
class MovieFactory{
private:
	Movie* movieTemplates[3];
	//TODO: hashtable
public:
 	MovieFactory() {
    	movieTemplates[0] = new ClassicMovie();
        movieTemplates[1] = new DramaMovie();
        movieTemplates[2] = new ComedyMovie();
    }

    ~MovieFactory() {
        for (int i = 0; i < 3; i++) {
        	delete movieTemplates[i];
            movieTemplates[i] = NULL;
        }
    }

    Movie* createMovie(string genre, ifstream& inputFile) {	//NOTE: should this take in more data and create the entire movie?
    	//TODO: replace this method with one that uses hashtable.
    	
    	Movie* createdMovie = NULL;
    	if(genre == "C") createdMovie = movieTemplates[0] -> create();    //TODO: isolate this bit into its own method.
		if(genre == "D") createdMovie = movieTemplates[1] -> create();
		if(genre == "F") createdMovie = movieTemplates[2] -> create();
		
        const string* dataTypeNames = createdMovie -> dataTypeNames();
        int dataTypeCount = createdMovie -> dataTypeCount();
  
		for(int i = 0; i < dataTypeCount-1; i++){	//TODO: error checking
			string currentData;
			getline(inputFile, currentData, ',');
            createdMovie -> addData(dataTypeNames[i],currentData);
		}

<<<<<<< HEAD
		string lastData;
		getline(inputFile, lastData);
		createdMovie -> addData(dataTypeNames[dataTypeCount-1],lastData);

		return createdMovie;
    }

    Movie* createMovie(const Movie& m) {    //used in place of a copy constructor for movies
        Movie* createdMovie = NULL;
        string genre = m.genre();
        if(genre == "C") createdMovie = movieTemplates[0] -> create();
        if(genre == "D") createdMovie = movieTemplates[1] -> create();
        if(genre == "F") createdMovie = movieTemplates[2] -> create();

        const string* dataTypeNames = createdMovie -> dataTypeNames();
        int dataTypeCount = m.dataTypeCount();
        
        for(int i = 0; i < dataTypeCount; i++){    //TODO: error checking
            string currentData = m.getData(dataTypeNames[i]); 
            createdMovie -> addData(dataTypeNames[i],currentData);
        }
        return createdMovie;
    }
};
*/
=======
#endif
>>>>>>> a925336a4d241d7eb74836a3e8f13ecc7ae8e618
