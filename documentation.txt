--------------------------------- history.h --------------------------------- 
History objects hold a list of event objects. It is used to keep track of
customer transaction history.

On destruction, delete each node in the list. 

The displayAll method iterates through the eventList calling each object's
display method.

The addTransaction method takes in a string, creates an empty event object,
and calls that event object's set method passing in the string that was 
passed into it. Finally, it appends that event object onto the end of the
eventlist.

--------------------------------- event.h --------------------------------- 
An event object holds the data for a transaction. It has two private string
datamembers, one for the borrowed/returned status called borrowedOrReturned
and another for the rest of the string. The borrowed/returned status will 
likely be a single character (B or R respectively) for our usage, but we 
chose to use a string as that will allow for more flexibility in the future. 

The display method prints both the borrowedOrReturned string and the
otherinfo string as one line. 

The set method parses the string passed into it and assigns the first 
substring to the borrowedOrReturned string and the rest of the string to the
otherInfo String. If the setting fails it returns an Error object.  

--------------------------------- error.h --------------------------------- 
The error class has a private string datamember that holds an error message.

On construction, error takes in an error message string and assigns it to the
object's error message datamember. 

It has an accessor method called getErrorMessage that returns the private 
error message datamember.

--------------------------------- customer.h --------------------------------- 

The customer class is used to keep track of customer data. Each customer object 
corresponds to each customer. As private datamembers, it possesses a history
object which is used to log all customer transactions, a first name string,
a last name string, and a string for the customer ID. The customerID is a four
digit int, but storing it as a string will be more flexible for the future.
This shouldn't be a problem since strings of numbers are still comparable and
we won't need to perform any arithmatic on the customerIDs.

The displayHistory method displays the history by calling its history object's
displayAll method.

The addTransaction method takes in a string and calls the history object's 
addTransaction method with the string as a parameter.